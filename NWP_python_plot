{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pearl-K/Climate-Modeling/blob/main/NWP_python_plot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 라이브러리 불러오기"
      ],
      "metadata": {
        "id": "enWVrSOq39gK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install xarray"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GV4Jc4aqgQHd",
        "outputId": "d94cc37f-1b2d-4ffb-bb5b-a57138516b1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xarray in /usr/local/lib/python3.10/dist-packages (2023.7.0)\n",
            "Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.10/dist-packages (from xarray) (1.23.5)\n",
            "Requirement already satisfied: pandas>=1.4 in /usr/local/lib/python3.10/dist-packages (from xarray) (1.5.3)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from xarray) (23.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray) (2023.3.post1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=1.4->xarray) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import xarray as xr\n",
        "import pandas as pd\n",
        "#import netCDF4 as nc\n",
        "import matplotlib.pyplot as plt\n",
        "import imageio"
      ],
      "metadata": {
        "id": "NtZL6LCQgNMt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/', force_remount=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "je6KonK_gWQ0",
        "outputId": "877bd0e8-2581-4bd1-d927-c15c88c98a90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.chdir('/content/drive/MyDrive/NWP 수치모델링/')\n",
        "os.getcwd()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "FCcu-BGjhFy2",
        "outputId": "48bca776-be2b-43bf-fe78-c18101fa37dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/content/drive/.shortcut-targets-by-id/1rblNNrkBBUh5KaG57h1IqAJktbbs9ex5/NWP 수치모델링'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 데이터 불러오기"
      ],
      "metadata": {
        "id": "HNF7wjlW4A72"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_name = [\"p20\", \"m20\", \"0\", \"m10\", \"p10\"]"
      ],
      "metadata": {
        "id": "BJmRMtUW7H-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in data_name:\n",
        "    globals()['data_' + i] = xr.open_dataset(\"wrfout_\" + i + \".nc\")"
      ],
      "metadata": {
        "id": "462EOOFjgkp0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "var = [\"U\", \"V\", \"W\", \"T\", \"QVAPOR\", \"TSK\", \"U10\", \"V10\", \"QFX\", \"ACHFX\", \"HFX\", \"LH\", \"MU\", \"UST\"]\n",
        "\n",
        "for d in data_name:\n",
        "    for v in var:\n",
        "        globals()[v +\"_\" + d ] =eval(\"data_\" + d)[v]"
      ],
      "metadata": {
        "id": "Rxn_972pi9sL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "def change_time(data, time_index):\n",
        "    timeset = data.XTIME.values[time_index]\n",
        "    datetime_obj = datetime.utcfromtimestamp(timeset.tolist() / 1e9)\n",
        "    formatted_datetime = datetime_obj.strftime('%Y-%m-%d %H:%M')\n",
        "    return formatted_datetime"
      ],
      "metadata": {
        "id": "w8RvqTih8Umb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 그리기"
      ],
      "metadata": {
        "id": "-xGOMSRsFZjA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "min = []\n",
        "max = []\n",
        "\n",
        "for d in data_name:\n",
        "    south_north_index = 0\n",
        "    U_data = eval(\"data_\" + d)['U'][:, :, south_north_index, 1:].values\n",
        "    min.append(np.min(U_data))\n",
        "    max.append(np.max(U_data))\n",
        "vmin = np.min(min)\n",
        "vmax = np.max(max)\n",
        "\n",
        "data_name = [\"p20\"]\n",
        "\n",
        "for d in data_name:\n",
        "    south_north_index = 0\n",
        "    output_filename = d + '_U.gif'\n",
        "    base_filename = d + '_U'\n",
        "\n",
        "\n",
        "    # U 변수 가져오기\n",
        "    U_data = eval(\"data_\" + d)['U'][:, :, south_north_index, 1:].values\n",
        "\n",
        "    # GIF 이미지를 저장할 빈 목록 생성\n",
        "    images = []\n",
        "\n",
        "    # Time 차원의 길이 가져오기\n",
        "    time_length = eval(\"data_\" + d).dims['Time']\n",
        "\n",
        "    # 각 Time 스텝에 대한 그래프 이미지 생성\n",
        "    for time_index in range(time_length):\n",
        "        # 이미지 생성\n",
        "        plt.figure()\n",
        "\n",
        "        # 벡터 그래프 (quiver plot)\n",
        "        x = range(0, U_data.shape[2], 3)  # x 좌표 띄엄띄엄 설정\n",
        "        y = range(0, U_data.shape[1], 2)  # y 좌표 띄엄띄엄 설정\n",
        "        X, Y = np.meshgrid(x, y)\n",
        "\n",
        "        # contourf plot (U 값 나타내기)\n",
        "        if abs(vmin) < vmax:\n",
        "            contourf_levels = np.linspace(-vmax, vmax)  # 나타낼 레벨 수\n",
        "        else:\n",
        "            contourf_levels = np.linspace(vmin, -vmin)  # 나타낼 레벨 수\n",
        "\n",
        "        if abs(vmin) < vmax:\n",
        "            contourf_plot = plt.contourf(X, Y, U_data[time_index][y][:, x], levels=contourf_levels, cmap='seismic', vmin=-vmax, vmax=vmax)  # U 값을 contourf plot으로 나타냄\n",
        "        else:\n",
        "            contourf_plot = plt.contourf(X, Y, U_data[time_index][y][:, x], levels=contourf_levels, cmap='seismic', vmin=vmin, vmax=-vmin)  # U 값을 contourf plot으로 나타냄\n",
        "        plt.colorbar(contourf_plot)  # 컬러바 추가\n",
        "        time_str = change_time(eval(\"data_\" + d),time_index)\n",
        "        plt.title(f'{d} - Time: {time_str}')\n",
        "\n",
        "        # 이미지 파일로 저장\n",
        "        image_path = f'{base_filename}_time_{time_index}.png'\n",
        "        plt.savefig(image_path)\n",
        "        plt.close()\n",
        "\n",
        "        # 이미지를 GIF 이미지 목록에 추가\n",
        "        images.append(imageio.imread(image_path))\n",
        "\n",
        "        # 이미지 파일 삭제 (선택 사항)\n",
        "        #os.remove(image_path)\n",
        "\n",
        "\n",
        "    # GIF 파일에 루프 설정 (반복)\n",
        "    imageio.mimsave(output_filename, images, duration=1, loop=0)  # loop 매개변수 설정\n",
        "\n",
        "    # Google Colab에서 파일 다운로드\n",
        "    #from google.colab import files\n",
        "    #files.download(output_filename)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lvnS_D6VnL28",
        "outputId": "4c6be366-e4e7-4230-dca1-e87320f3a3f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-9f4752b2410e>:59: DeprecationWarning: Starting with ImageIO v3 the behavior of this function will switch to that of iio.v3.imread. To keep the current behavior (and make this warning disappear) use `import imageio.v2 as imageio` or call `imageio.v2.imread` directly.\n",
            "  images.append(imageio.imread(image_path))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "pLXcrQMAOsuf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}